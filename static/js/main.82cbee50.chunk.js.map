{"version":3,"sources":["utils/toast.js","constants/trello.js","services/trelloApi.js","Trello.js","services/trello.js","context/TrelloContext.js","routers/routes.js","routers/CommonRoute.js","pages/Home/Home.styles.js","pages/Home/Home.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["toast","configure","defaultToastOption","position","autoClose","closeOnClick","pauseOnHover","process","TRELLO_MANDAL_ART_ID","REACT_APP_TRELLO_MANDAL_ART_ID","TRELLO_API_KEY","REACT_APP_TRELLO_LIST_ID","REACT_APP_TRELLO_CARD_ID","REACT_APP_TRELLO_API_KEY","MyTrello","key","token","this","opts","name","replace","expiration","scope","read","write","account","Promise","resolve","reject","window","location","protocol","host","pathname","search","popup","open","Object","keys","filter","k","join","screenX","innerWidth","screenY","innerHeight","timeout","setTimeout","close","Error","popupTick","setInterval","closed","clearInterval","addEventListener","e","data","clearTimeout","localStorage","setItem","method","path","qs","URLSearchParams","append","init","url","body","toString","headers","fetch","then","r","json","req","authTrello","callback","getItem","existingToken","auth","catch","getTrello","params","get","getListsOnBoard","boardId","field","getLabelsOnBoard","limit","getCardsOnBoard","Context","createContext","Provider","defaultTrelloObjects","Consumer","boards","lists","cards","labels","isAuthorized","TrelloProvider","children","useState","setBoardId","trelloObjects","setTrelloObjects","useEffect","a","prevState","content","error","value","state","actions","TrelloContext","description","CommonRoute","rest","Container","styled","div","flexContainer","Title","font","size","color","text","BoardLink","Link","Button","NewBaseButton","white","Filler","Home","to","theme","onClick","flexColumnCenterX","Dashboard","useRouteMatch","history","useHistory","useContext","length","map","id","desc","idList","idLabels","AppBody","App","root","Routes","board","basename","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.82cbee50.chunk.js","sourcesContent":["import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure();\n\nconst defaultToastOption = {\n  position: 'top-center',\n  autoClose: 3000,\n  closeOnClick: true,\n  pauseOnHover: true,\n};\n\nexport const customToast = (content) => {\n  toast(content, {\n    ...defaultToastOption,\n  });\n};\n\nexport const errorToast = (content) => {\n  toast.error(content, {\n    ...defaultToastOption,\n  });\n};\n","export const {\n  REACT_APP_TRELLO_MANDAL_ART_ID: TRELLO_MANDAL_ART_ID,\n  REACT_APP_TRELLO_LIST_ID: TRELLO_LIST_ID,\n  REACT_APP_TRELLO_CARD_ID: TRELLO_CARD_ID,\n  REACT_APP_TRELLO_API_KEY: TRELLO_API_KEY,\n} = process.env;\n\nexport const TRELLO_COLLECTION_TYPE = {\n  CARDS: 'cards',\n  CHECKLISTS: 'checklists',\n  BOARDS: 'boards',\n  LISTS: 'lists',\n  MEMBERS: 'members',\n  ORGANIZATIONS: 'organizations',\n  ACTIONS: 'actions',\n};\n\nexport const TRELLO_LABEL_COLOR = [\n  'yellow',\n  'purple',\n  'blue',\n  'red',\n  'green',\n  'orange',\n  'black',\n  'sky',\n  'pink',\n  'lime',\n];\n","import { TRELLO_API_KEY } from 'constants/trello';\nimport Trello from 'Trello';\n\nconst MyTrello = new Trello(TRELLO_API_KEY);\n\nexport const authTrello = (callback) => {\n  return Promise.resolve()\n    .then(() => localStorage.getItem('trello_token'))\n    .then((existingToken) => {\n      if (existingToken) {\n        MyTrello.token = existingToken;\n        MyTrello.key = TRELLO_API_KEY;\n      } else {\n        return MyTrello.auth({\n          name: 'Mandal-art App',\n          scope: {\n            read: true,\n            write: true,\n            account: true,\n          },\n          expiration: 'never',\n        });\n      }\n    })\n    .then(() => {\n      return callback();\n    })\n    .catch(() => {\n      // console.log(\n      //   'something bad happened, or the user took too long to authorize.',\n      //   e\n      // );\n    });\n};\n\nexport const getTrello = (path, params = {}) => {\n  return MyTrello.get(`/1/${path}`, params);\n};\n\nexport const postTrello = (path, params = {}) => {\n  return MyTrello.post(`/1/${path}`, params);\n};\n\nexport const putTrello = (path, params = {}) => {\n  return MyTrello.put(`/1/${path}`, params);\n};\n\nexport const deleteTrello = (path, params = {}) => {\n  return MyTrello.delete(`/1/${path}`, params);\n};\n\nexport const getColletionTrello = (type, id, params = {}) => {\n  return MyTrello.get(`/1/${type}/${id}`, params);\n};\n","class Trello {\n  constructor(key, token) {\n    this.key = key;\n    this.token = token;\n  }\n\n  auth(opts) {\n    const name = (opts.name || 'My App').replace(/ /g, '+');\n    const expiration = opts.expiration || '1hour';\n    const scope = opts.scope || { read: true, write: true, account: false };\n\n    return new Promise((resolve, reject) => {\n      const { protocol, host, pathname, search } = window.location;\n      const popup = window.open(\n        `https://trello.com/1/authorize?response_type=token&key=${\n          this.key\n        }&return_url=${protocol}//${host}${pathname}${search}&callback_method=postMessage&scope=${Object.keys(\n          scope\n        )\n          .filter((k) => scope[k])\n          .join(',')}&expiration=${expiration}&name=${name}`,\n        'trello',\n        `height=606,width=405,left=${\n          window.screenX + (window.innerWidth - 420) / 2\n        },right=${window.screenY + (window.innerHeight - 470) / 2}`\n      );\n\n      const timeout = setTimeout(() => {\n        popup.close();\n        reject(new Error('Trello pop-up closed.'));\n      }, 60000);\n\n      const popupTick = setInterval(() => {\n        if (popup.closed) {\n          clearInterval(popupTick);\n          reject(new Error('Trello pop-up closed.'));\n        }\n      }, 500);\n\n      window.addEventListener('message', (e) => {\n        if (typeof e.data === 'string') {\n          clearTimeout(timeout);\n          popup.close();\n          this.token = e.data;\n          localStorage.setItem('trello_token', e.data);\n          resolve();\n        }\n      });\n    });\n  }\n\n  req(method, path, data) {\n    data = data || {};\n    data.key = this.key;\n    data.token = this.token;\n    const qs = new URLSearchParams();\n    // eslint-disable-next-line guard-for-in\n    for (const k in data) {\n      qs.append(k, data[k]);\n    }\n\n    const init = {\n      method,\n    };\n\n    let url = `https://api.trello.com${path}`;\n\n    if (method === 'POST' || method === 'PUT') {\n      init.body = qs.toString();\n      init.headers = {\n        'Content-type': 'application/x-www-form-urlencoded',\n      };\n    } else {\n      url += `?${qs.toString()}`;\n    }\n\n    return fetch(url, init).then((r) => r.json());\n  }\n\n  get(path, data) {\n    return this.req('GET', path, data);\n  }\n\n  head(path, data) {\n    return this.req('HEAD', path, data);\n  }\n\n  post(path, data) {\n    return this.req('POST', path, data);\n  }\n\n  put(path, data) {\n    return this.req('PUT', path, data);\n  }\n\n  delete(path, data) {\n    return this.req('DELETE', path, data);\n  }\n}\n\nexport default Trello;\n","import { getRandomInt } from 'utils/utils';\nimport {\n  getTrello,\n  getColletionTrello,\n  deleteTrello,\n  postTrello,\n  putTrello,\n} from 'services/trelloApi';\nimport { TRELLO_COLLECTION_TYPE, TRELLO_LABEL_COLOR } from 'constants/trello';\n\nexport const getMe = () => {\n  return getTrello('members/me');\n};\n\nexport const getMyBoards = () => {\n  return getTrello('members/me/boards');\n};\n\n/** \n################ Get from board\n* */\nexport const getListsOnBoard = (boardId, field = 'all') => {\n  return getTrello(`boards/${boardId}/lists/${field}`);\n};\n\nexport const getLabelsOnBoard = (boardId) => {\n  const params = {\n    limit: 100,\n  };\n  return getTrello(`boards/${boardId}/labels`, params);\n};\n\nexport const getCardsOnBoard = (boardId, field = 'all') => {\n  return getTrello(`boards/${boardId}/cards/${field}`);\n};\n\nexport const getCardOnBoardById = (boardId, cardId) => {\n  return getTrello(`boards/${boardId}/cards/${cardId}`);\n};\n\n/** \n################ Get collections by id\n* */\nexport const getCardById = (cardId) => {\n  return getColletionTrello(TRELLO_COLLECTION_TYPE.CARDS, cardId);\n};\n\nexport const getListById = (listId) => {\n  return getColletionTrello(TRELLO_COLLECTION_TYPE.LISTS, listId);\n};\n\nexport const createLabel = async (tagName, idBoard) => {\n  const index = getRandomInt(0, TRELLO_LABEL_COLOR.length);\n  const newLabel = {\n    name: tagName,\n    color: TRELLO_LABEL_COLOR[index],\n    idBoard,\n  };\n  const res = await postTrello('labels', newLabel);\n  return res;\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const createCard = async (idList, labels) => {\n  const newCard = {\n    idList,\n    name: 'aa',\n    desc: JSON.stringify({}),\n    pos: 'top',\n    idLabels: labels,\n  };\n  return postTrello('cards', newCard);\n};\n\nexport const updateCard = async (cell) => {\n  if (!cell) return;\n\n  const { id, desc, idLabels } = cell;\n  const card = {\n    desc,\n    idLabels,\n  };\n  return putTrello(`${TRELLO_COLLECTION_TYPE.CARDS}/${id}`, card);\n};\n\n/** \n################ delete collections by id\n* */\nexport const deleteCardById = (cardId) => {\n  return deleteTrello(`${TRELLO_COLLECTION_TYPE.CARDS}/${cardId}`);\n};\n","import React, { useState, createContext, useEffect } from 'react';\n\nimport { errorToast } from 'utils/toast';\nimport {\n  getLabelsOnBoard,\n  getCardsOnBoard,\n  getListsOnBoard,\n} from 'services/trello';\nimport { authTrello } from 'services/trelloApi';\n\nconst Context = createContext();\n\nconst { Provider, Consumer: TrelloConsumer } = Context;\nconst defaultTrelloObjects = {\n  boards: [],\n  lists: [],\n  cards: [],\n  labels: [],\n  isAuthorized: true,\n};\nconst TrelloProvider = ({ children }) => {\n  const [boardId, setBoardId] = useState();\n  const [trelloObjects, setTrelloObjects] = useState({\n    ...defaultTrelloObjects,\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (!boardId) return;\n      await authTrello().then(async () => {\n        try {\n          const lists = await getListsOnBoard(boardId);\n          const cards = await getCardsOnBoard(boardId);\n          const labels = await getLabelsOnBoard(boardId);\n\n          setTrelloObjects((prevState) => ({\n            ...prevState,\n            lists,\n            cards,\n            labels,\n          }));\n        } catch (e) {\n          setTrelloObjects({\n            ...defaultTrelloObjects,\n            isAuthorized: false,\n          });\n          errorToast('유효하지 않은 접근입니다.');\n        }\n      });\n    })();\n  }, [boardId]);\n\n  return (\n    <Provider\n      value={{\n        state: {\n          trelloObjects,\n        },\n        actions: { setBoardId },\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nconst TrelloContext = Context;\n\nexport { TrelloProvider, TrelloConsumer, TrelloContext };\n","const root = {\n  path: `/home`,\n  url: `/home`,\n  description: 'Home Page',\n};\n\nconst board = {\n  path: '/board/:boardId',\n  url: '/board/',\n  description: 'Board Page',\n};\n\nexport default {\n  root,\n  board,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { flexContainer, NewBaseButton, font, white, text } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexContainer('center', 'center', 'column')};\n\n  width: 100%;\n  padding: 20px;\n  min-height: 100vh;\n`;\n\nexport const Title = styled.div`\n  ${font({ size: '22px', color: text })};\n`;\n\nexport const BoardLink = styled(Link)`\n  margin: 20px;\n`;\n\nBoardLink.Button = styled(NewBaseButton)`\n  ${font({ size: '15px', color: white })};\n`;\n\nexport const Filler = styled.div`\n  display: flex;\n  width: 100%;\n  flex: 1 1 auto;\n`;\n","import React from 'react';\n\nimport { TRELLO_MANDAL_ART_ID } from 'constants/trello';\n\nimport { Container, Title, BoardLink, Filler } from './Home.styles';\n\nconst Home = () => {\n  return (\n    <>\n      <Container>\n        <Title>Mandal Art</Title>\n        <BoardLink to={`/board/${TRELLO_MANDAL_ART_ID}`}>\n          <BoardLink.Button theme=\"yellow\" size=\"xlarge\" onClick={() => {}}>\n            Test Board 이동\n          </BoardLink.Button>\n        </BoardLink>\n        <Filler />\n      </Container>\n    </>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useContext } from 'react';\nimport { useRouteMatch, useHistory } from 'react-router-dom';\nimport { Spinner } from 'remember-ui';\n\nimport { TrelloContext } from 'context/TrelloContext';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const {\n    params: { boardId },\n  } = useRouteMatch();\n  const history = useHistory();\n\n  const {\n    state: {\n      trelloObjects: { lists, cards, labels, isAuthorized },\n    },\n    actions: { setBoardId },\n  } = useContext(TrelloContext);\n\n  useEffect(() => {\n    (async () => {\n      setBoardId(boardId);\n    })();\n  }, [boardId, setBoardId]);\n\n  useEffect(() => {\n    if (!isAuthorized) history.replace('/home');\n  }, [isAuthorized, history]);\n\n  return (\n    <Container>\n      {isAuthorized && lists.length === 0 && <Spinner />}\n\n      {lists.map(({ id, name }) => (\n        <div key={id}>\n          {id} - {name}\n        </div>\n      ))}\n\n      <br />\n      <br />\n      <br />\n\n      {cards.map(({ id, desc, idList, idLabels, name }) => (\n        <div key={id}>\n          {idList} - {name} - {desc}\n        </div>\n      ))}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  min-height: 100vh;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport { TrelloProvider } from 'context/TrelloContext';\nimport Routes from 'routers/routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport Home from 'pages/Home/Home';\nimport Dashboard from 'pages/Dashboard/Dashboard';\n\nimport { AppBody } from './App.styles';\n\nconst BASE_URL = '/mandal-art';\n\nfunction App() {\n  const { root, board } = Routes;\n\n  return (\n    <TrelloProvider>\n      <BrowserRouter basename={BASE_URL}>\n        <AppBody>\n          <GlobalTheme />\n          <Switch>\n            <CommonRoute path={board.path}>\n              <Dashboard />\n            </CommonRoute>\n            <CommonRoute path={root.path}>\n              <Home />\n            </CommonRoute>\n            <Redirect to={root.path} />\n          </Switch>\n        </AppBody>\n      </BrowserRouter>\n    </TrelloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // console.log(\n              //   'New content is available and will be used when all ' +\n              //     'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              // );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // console.log('Content is cached for offline use.');\n\n              // Execute callback\n              // eslint-disable-next-line no-lonely-if\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
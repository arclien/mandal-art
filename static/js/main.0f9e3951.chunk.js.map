{"version":3,"sources":["utils/toast.js","utils/utils.js","constants/trello.js","services/trelloApi.js","Trello.js","services/trello.js","context/TrelloContext.js","context/TrelloMyInfoContext.js","routers/routes.js","routers/CommonRoute.js","pages/Home/Home.styles.js","pages/Home/Home.js","components/Board/BoardCell/BoardCell.styles.js","components/Board/BoardCell/BoardCell.js","components/Board/Board.styles.js","components/Board/Board.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["toast","configure","defaultToastOption","position","autoClose","closeOnClick","pauseOnHover","errorToast","content","error","insertItemOnArray","arr","index","newItem","slice","getUUID","uuidv4","process","TRELLO_MANDAL_ART_ID","REACT_APP_TRELLO_MANDAL_ART_ID","TRELLO_API_KEY","REACT_APP_TRELLO_LIST_ID","REACT_APP_TRELLO_CARD_ID","REACT_APP_TRELLO_API_KEY","TRELLO_COLLECTION_TYPE","MyTrello","key","token","this","opts","name","replace","expiration","scope","read","write","account","Promise","resolve","reject","window","location","protocol","host","pathname","search","popup","open","Object","keys","filter","k","join","screenX","innerWidth","screenY","innerHeight","timeout","setTimeout","close","Error","popupTick","setInterval","closed","clearInterval","addEventListener","e","data","clearTimeout","localStorage","setItem","method","path","qs","URLSearchParams","append","init","url","body","toString","headers","fetch","then","r","json","req","authTrello","callback","getItem","existingToken","auth","catch","getTrello","params","get","postTrello","post","putTrello","put","getListsOnBoard","boardId","field","getLabelsOnBoard","limit","getCardsOnBoard","createCard","idList","a","newCard","pos","updateCard","cell","id","card","createList","idBoard","newList","updateList","list","getDummyList","currentLength","trelloType","defaultProps","Array","from","length","BOARD_LENGTH","generateBoard","board","lists","cards","newLists","isCenter","map","i","_cards","listId","getCardsByListId","Context","createContext","Provider","TrelloConsumer","Consumer","defaultTrelloObjects","labels","isAuthorized","isLoaded","TrelloProvider","children","useState","trelloBoardId","setTrelloBoardId","boards","setBoards","trelloObjects","setTrelloObjects","useEffect","_boards","prevState","value","state","actions","TrelloContext","defaultMyInfoObjects","me","TrelloMyInfoProvider","myInfo","setMyInfo","getMyInfo","obj","JSON","stringify","TrelloMyInfoContext","description","CommonRoute","rest","Container","styled","div","flexContainer","Title","font","size","color","text","Text","BoardList","BoardLink","Link","Button","NewBaseButton","white","Filler","Home","useContext","email","fullName","idBoards","to","theme","onClick","isMainBoard","red50","green50","blue30","Input","BaseInput","width","BoardCell","setText","onChange","useCallback","responseOfNewCell","els","el","type","maxLength","onEnter","target","GridContainer","Board","boardIndex","cellIndex","flexColumnCenterX","BoardWrapper","Dashboard","useRouteMatch","history","useHistory","AppBody","App","root","Routes","basename","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0f9e3951.chunk.js","sourcesContent":["import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure();\n\nconst defaultToastOption = {\n  position: 'top-center',\n  autoClose: 3000,\n  closeOnClick: true,\n  pauseOnHover: true,\n};\n\nexport const customToast = (content) => {\n  toast(content, {\n    ...defaultToastOption,\n  });\n};\n\nexport const errorToast = (content) => {\n  toast.error(content, {\n    ...defaultToastOption,\n  });\n};\n","import { v4 as uuidv4 } from 'uuid';\n\nexport const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport const isEmptyObject = (obj) => {\n  return JSON.stringify(obj) === '{}' || Object.keys(obj).length === 0;\n};\n\nexport const insertItemOnArray = (arr, index, newItem) => [\n  // part of the array before the specified index\n  ...arr.slice(0, index),\n  // inserted item\n  newItem,\n  // part of the array after the specified index\n  ...arr.slice(index),\n];\n\nexport const replaceObejctOnArray = (arr, item) => {\n  return arr.map((x) => (item.id === x.id ? item : x));\n};\n\nexport const getUUID = () => uuidv4();\n","export const {\n  REACT_APP_TRELLO_MANDAL_ART_ID: TRELLO_MANDAL_ART_ID,\n  REACT_APP_TRELLO_LIST_ID: TRELLO_LIST_ID,\n  REACT_APP_TRELLO_CARD_ID: TRELLO_CARD_ID,\n  REACT_APP_TRELLO_API_KEY: TRELLO_API_KEY,\n} = process.env;\n\nexport const TRELLO_COLLECTION_TYPE = {\n  CARDS: 'cards',\n  CHECKLISTS: 'checklists',\n  BOARDS: 'boards',\n  LISTS: 'lists',\n  MEMBERS: 'members',\n  ORGANIZATIONS: 'organizations',\n  ACTIONS: 'actions',\n};\n\nexport const TRELLO_LABEL_COLOR = [\n  'yellow',\n  'purple',\n  'blue',\n  'red',\n  'green',\n  'orange',\n  'black',\n  'sky',\n  'pink',\n  'lime',\n];\n","import { TRELLO_API_KEY } from 'constants/trello';\nimport Trello from 'Trello';\n\nconst MyTrello = new Trello(TRELLO_API_KEY);\n\nexport const authTrello = (callback) => {\n  return Promise.resolve()\n    .then(() => localStorage.getItem('trello_token'))\n    .then((existingToken) => {\n      if (existingToken) {\n        MyTrello.token = existingToken;\n        MyTrello.key = TRELLO_API_KEY;\n      } else {\n        return MyTrello.auth({\n          name: 'Mandal-art App',\n          scope: {\n            read: true,\n            write: true,\n            account: true,\n          },\n          expiration: 'never',\n        });\n      }\n    })\n    .then(() => {\n      return callback();\n    })\n    .catch(() => {\n      // console.log(\n      //   'something bad happened, or the user took too long to authorize.',\n      //   e\n      // );\n    });\n};\n\nexport const getTrello = (path, params = {}) => {\n  return MyTrello.get(`/1/${path}`, params);\n};\n\nexport const postTrello = (path, params = {}) => {\n  return MyTrello.post(`/1/${path}`, params);\n};\n\nexport const putTrello = (path, params = {}) => {\n  return MyTrello.put(`/1/${path}`, params);\n};\n\nexport const deleteTrello = (path, params = {}) => {\n  return MyTrello.delete(`/1/${path}`, params);\n};\n\nexport const getColletionTrello = (type, id, params = {}) => {\n  return MyTrello.get(`/1/${type}/${id}`, params);\n};\n","class Trello {\n  constructor(key, token) {\n    this.key = key;\n    this.token = token;\n  }\n\n  auth(opts) {\n    const name = (opts.name || 'My App').replace(/ /g, '+');\n    const expiration = opts.expiration || '1hour';\n    const scope = opts.scope || { read: true, write: true, account: false };\n\n    return new Promise((resolve, reject) => {\n      const { protocol, host, pathname, search } = window.location;\n      const popup = window.open(\n        `https://trello.com/1/authorize?response_type=token&key=${\n          this.key\n        }&return_url=${protocol}//${host}${pathname}${search}&callback_method=postMessage&scope=${Object.keys(\n          scope\n        )\n          .filter((k) => scope[k])\n          .join(',')}&expiration=${expiration}&name=${name}`,\n        'trello',\n        `height=606,width=405,left=${\n          window.screenX + (window.innerWidth - 420) / 2\n        },right=${window.screenY + (window.innerHeight - 470) / 2}`\n      );\n\n      const timeout = setTimeout(() => {\n        popup.close();\n        reject(new Error('Trello pop-up closed.'));\n      }, 60000);\n\n      const popupTick = setInterval(() => {\n        if (popup.closed) {\n          clearInterval(popupTick);\n          reject(new Error('Trello pop-up closed.'));\n        }\n      }, 500);\n\n      window.addEventListener('message', (e) => {\n        if (typeof e.data === 'string') {\n          clearTimeout(timeout);\n          popup.close();\n          this.token = e.data;\n          localStorage.setItem('trello_token', e.data);\n          resolve();\n        }\n      });\n    });\n  }\n\n  req(method, path, data) {\n    data = data || {};\n    data.key = this.key;\n    data.token = this.token;\n    const qs = new URLSearchParams();\n    // eslint-disable-next-line guard-for-in\n    for (const k in data) {\n      qs.append(k, data[k]);\n    }\n\n    const init = {\n      method,\n    };\n\n    let url = `https://api.trello.com${path}`;\n\n    if (method === 'POST' || method === 'PUT') {\n      init.body = qs.toString();\n      init.headers = {\n        'Content-type': 'application/x-www-form-urlencoded',\n      };\n    } else {\n      url += `?${qs.toString()}`;\n    }\n\n    return fetch(url, init).then((r) => r.json());\n  }\n\n  get(path, data) {\n    return this.req('GET', path, data);\n  }\n\n  head(path, data) {\n    return this.req('HEAD', path, data);\n  }\n\n  post(path, data) {\n    return this.req('POST', path, data);\n  }\n\n  put(path, data) {\n    return this.req('PUT', path, data);\n  }\n\n  delete(path, data) {\n    return this.req('DELETE', path, data);\n  }\n}\n\nexport default Trello;\n","import { getRandomInt } from 'utils/utils';\nimport {\n  getTrello,\n  getColletionTrello,\n  deleteTrello,\n  postTrello,\n  putTrello,\n} from 'services/trelloApi';\nimport { TRELLO_COLLECTION_TYPE, TRELLO_LABEL_COLOR } from 'constants/trello';\n\nexport const getMe = () => {\n  return getTrello('members/me');\n};\n\nexport const getMyBoards = () => {\n  return getTrello('members/me/boards');\n};\n\n/** \n################ Get from board\n* */\n\nexport const getBoard = (boardId) => {\n  return getTrello(`boards/${boardId}`);\n};\n\nexport const getListsOnBoard = (boardId, field = 'open') => {\n  return getTrello(`boards/${boardId}/lists/${field}`);\n};\n\nexport const getLabelsOnBoard = (boardId) => {\n  const params = {\n    limit: 100,\n  };\n  return getTrello(`boards/${boardId}/labels`, params);\n};\n\nexport const getCardsOnBoard = (boardId, field = 'visible') => {\n  return getTrello(`boards/${boardId}/cards/${field}`);\n};\n\nexport const getCardOnBoardById = (boardId, cardId) => {\n  return getTrello(`boards/${boardId}/cards/${cardId}`);\n};\n\n/** \n################ Get collections by id\n* */\nexport const getCardById = (cardId) => {\n  return getColletionTrello(TRELLO_COLLECTION_TYPE.CARDS, cardId);\n};\n\nexport const getListById = (listId) => {\n  return getColletionTrello(TRELLO_COLLECTION_TYPE.LISTS, listId);\n};\n\nexport const createLabel = async (tagName, idBoard) => {\n  const index = getRandomInt(0, TRELLO_LABEL_COLOR.length);\n  const newLabel = {\n    name: tagName,\n    color: TRELLO_LABEL_COLOR[index],\n    idBoard,\n  };\n  const res = await postTrello('labels', newLabel);\n  return res;\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const createCard = async (name, idList) => {\n  const newCard = {\n    idList,\n    name,\n    pos: 'bottom',\n  };\n  return postTrello('cards', newCard);\n};\n\nexport const updateCard = async (cell) => {\n  if (!cell) return;\n\n  const { id, name } = cell;\n  const card = {\n    name,\n  };\n  return putTrello(`${TRELLO_COLLECTION_TYPE.CARDS}/${id}`, card);\n};\n\nexport const createList = async (name, idBoard) => {\n  const newList = {\n    idBoard,\n    name,\n    pos: 'bottom',\n  };\n  return postTrello('lists', newList);\n};\n\nexport const updateList = async (list) => {\n  if (!list) return;\n  const { id } = list;\n\n  return putTrello(`${TRELLO_COLLECTION_TYPE.LISTS}/${id}`, { ...list });\n};\n\n/** \n################ delete collections by id\n* */\nexport const deleteCardById = (cardId) => {\n  return deleteTrello(`${TRELLO_COLLECTION_TYPE.CARDS}/${cardId}`);\n};\n","import React, { useState, createContext, useEffect } from 'react';\n\nimport { errorToast } from 'utils/toast';\nimport {\n  getLabelsOnBoard,\n  getCardsOnBoard,\n  getListsOnBoard,\n  getBoard,\n} from 'services/trello';\nimport { authTrello } from 'services/trelloApi';\nimport { insertItemOnArray, getUUID } from 'utils/utils';\n\nconst CENTER_INDEX = 4;\nconst BOARD_LENGTH = 9;\n\nconst getDummyList = (currentLength, trelloType, defaultProps = {}) =>\n  Array.from({ length: BOARD_LENGTH - 1 - currentLength }, () => ({\n    ...defaultProps,\n    id: `${getUUID()}`,\n    name: '',\n    trelloType,\n  }));\n\nconst getCardsByListId = (cards, listId) =>\n  cards.filter((card) => card.idList === listId);\n\nconst generateBoard = (board, lists, cards) => {\n  // console.log(board, lists, cards);\n\n  // 리스트 없는 경우 생성\n  const newLists = insertItemOnArray(\n    [...lists, ...getDummyList(lists.length, 'list', { idBoard: board.id })],\n    CENTER_INDEX,\n    {\n      id: board.id,\n      name: board.name,\n      trelloType: 'board',\n      isCenter: true,\n    }\n  );\n\n  return newLists.map((list, index) => {\n    // 가운데 보드(리스트) 생성(셀)\n    if (index === CENTER_INDEX) {\n      return newLists.map(({ id, name, idBoard }, i) => ({\n        id,\n        name,\n        idBoard,\n        trelloType: i === CENTER_INDEX ? 'board' : 'list',\n        isCenter: i === CENTER_INDEX,\n      }));\n    }\n\n    // 각 리스트(보드)에 종속된 카드 (셀) 필터\n    const _cards = getCardsByListId(cards, list.id).map(\n      ({ id, name, idBoard, idList }) => ({\n        id,\n        name,\n        idBoard,\n        idList,\n        trelloType: 'card',\n      })\n    );\n\n    // 긱 리스트(보드)에 종속된 카드 (셀) 더미 생성\n    return insertItemOnArray(\n      [\n        ..._cards,\n        ...getDummyList(_cards.length, 'card', {\n          idBoard: board.id,\n          idList: list.id,\n        }),\n      ],\n      CENTER_INDEX,\n      {\n        id: list.id,\n        name: list.name,\n        idBoard: list.idBoard,\n        trelloType: 'list',\n        isCenter: true,\n      }\n    );\n  });\n};\n\nconst Context = createContext();\n\nconst { Provider, Consumer: TrelloConsumer } = Context;\nconst defaultTrelloObjects = {\n  board: {},\n  lists: [],\n  cards: [],\n  labels: [],\n  isAuthorized: true,\n  isLoaded: false,\n};\n\nconst TrelloProvider = ({ children }) => {\n  const [trelloBoardId, setTrelloBoardId] = useState();\n  const [boards, setBoards] = useState([[]]);\n  const [trelloObjects, setTrelloObjects] = useState({\n    ...defaultTrelloObjects,\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (!trelloBoardId) return;\n      await authTrello().then(async () => {\n        try {\n          const board = await getBoard(trelloBoardId);\n          const lists = await getListsOnBoard(trelloBoardId);\n          const cards = await getCardsOnBoard(trelloBoardId);\n          const labels = await getLabelsOnBoard(trelloBoardId);\n\n          const _boards = generateBoard(board, lists, cards, labels);\n          setBoards(_boards);\n          // console.log(_boards);\n          setTrelloObjects((prevState) => ({\n            ...prevState,\n            board,\n            lists,\n            cards,\n            labels,\n            isLoaded: true,\n          }));\n        } catch (e) {\n          setTrelloObjects({\n            ...defaultTrelloObjects,\n            isAuthorized: false,\n          });\n          errorToast('유효하지 않은 접근입니다.');\n        }\n      });\n    })();\n  }, [trelloBoardId]);\n\n  return (\n    <Provider\n      value={{\n        state: {\n          boards,\n          trelloObjects,\n        },\n        actions: {\n          setBoards,\n          setTrelloBoardId,\n          setTrelloObjects,\n        },\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nconst TrelloContext = Context;\n\nexport { TrelloProvider, TrelloConsumer, TrelloContext };\n","import React, { useState, createContext } from 'react';\n\nimport { errorToast } from 'utils/toast';\nimport { isEmptyObject } from 'utils/utils';\nimport { getMyBoards, getMe } from 'services/trello';\nimport { authTrello } from 'services/trelloApi';\n\nconst Context = createContext();\n\nconst { Provider, Consumer: TrelloMyInfoConsumer } = Context;\n\nconst defaultMyInfoObjects = {\n  boards: [],\n  me: {},\n};\n\nconst TrelloMyInfoProvider = ({ children }) => {\n  const [myInfo, setMyInfo] = useState({ ...defaultMyInfoObjects });\n\n  const getMyInfo = async () => {\n    if (!isEmptyObject(myInfo?.me)) return myInfo;\n\n    return authTrello().then(async () => {\n      try {\n        const me = await getMe();\n        const boards = await getMyBoards();\n\n        setMyInfo((prevState) => ({\n          ...prevState,\n          me,\n          boards,\n        }));\n\n        return myInfo;\n      } catch (e) {\n        setMyInfo({\n          ...defaultMyInfoObjects,\n        });\n        errorToast('유효하지 않은 접근입니다.');\n      }\n    });\n  };\n\n  return (\n    <Provider\n      value={{\n        actions: {\n          getMyInfo,\n        },\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nconst TrelloMyInfoContext = Context;\n\nexport { TrelloMyInfoProvider, TrelloMyInfoConsumer, TrelloMyInfoContext };\n","const root = {\n  path: `/home`,\n  url: `/home`,\n  description: 'Home Page',\n};\n\nconst board = {\n  path: '/board/:boardId',\n  url: '/board/',\n  description: 'Board Page',\n};\n\nexport default {\n  root,\n  board,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { flexContainer, NewBaseButton, font, white, text } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexContainer('center', 'center', 'column')};\n\n  width: 100%;\n  padding: 20px;\n  min-height: 100vh;\n`;\n\nexport const Title = styled.div`\n  ${font({ size: '26px', color: text })};\n`;\n\nexport const Text = styled.div`\n  ${font({ size: '22px', color: text })};\n`;\n\nexport const BoardList = styled.div`\n  ${flexContainer('flex-start', 'center', 'row')};\n\n  flex-wrap: wrap;\n  padding: 20px;\n`;\n\nexport const BoardLink = styled(Link)`\n  margin: 10px;\n`;\n\nBoardLink.Button = styled(NewBaseButton)`\n  ${font({ size: '15px', color: white })};\n`;\n\nexport const Filler = styled.div`\n  display: flex;\n  width: 100%;\n  flex: 1 1 auto;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\n\nimport { TRELLO_MANDAL_ART_ID } from 'constants/trello';\nimport { TrelloMyInfoContext } from 'context/TrelloMyInfoContext';\n\nimport {\n  Container,\n  Title,\n  Text,\n  BoardList,\n  BoardLink,\n  Filler,\n} from './Home.styles';\n\nconst Home = () => {\n  const {\n    actions: { getMyInfo },\n  } = useContext(TrelloMyInfoContext);\n\n  const [myInfo, setMyInfo] = useState({\n    email: '',\n    fullName: '',\n    id: '',\n    idBoards: [],\n    boards: [],\n  });\n\n  useEffect(() => {\n    (async () => {\n      const {\n        me: { email, fullName, id, idBoards },\n        boards,\n      } = await getMyInfo();\n\n      setMyInfo({\n        email,\n        fullName,\n        id,\n        idBoards,\n        boards,\n      });\n    })();\n  }, [getMyInfo]);\n\n  return (\n    <>\n      <Container>\n        <Title>Mandal Art</Title>\n        <Text>유저 이름 : {myInfo?.fullName}</Text>\n        <Text>유저 이메일 : {myInfo?.email}</Text>\n\n        <BoardLink to={`/board/${TRELLO_MANDAL_ART_ID}`}>\n          <BoardLink.Button theme=\"yellow\" size=\"xlarge\" onClick={() => {}}>\n            Test Board 이동\n          </BoardLink.Button>\n        </BoardLink>\n\n        <BoardList>\n          {myInfo?.boards.map(({ name, id }) => (\n            <BoardLink key={id} to={`/board/${id}`}>\n              <BoardLink.Button theme=\"yellow\" size=\"large\" onClick={() => {}}>\n                {name} 이동\n              </BoardLink.Button>\n            </BoardLink>\n          ))}\n        </BoardList>\n\n        <Filler />\n      </Container>\n    </>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components';\nimport {\n  flexContainer,\n  blue30,\n  green50,\n  red50,\n  BaseInput,\n  font,\n  text,\n} from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexContainer('center', 'center', 'column')};\n\n  background-color: ${({ isMainBoard, isCenter }) =>\n    (isMainBoard && isCenter && red50) ||\n    (isMainBoard && !isCenter && green50) ||\n    (!isMainBoard && isCenter && green50) ||\n    (!isMainBoard && !isCenter && blue30)};\n\n  width: 100%;\n  height: 100px;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 7px;\n  word-break: keep-all;\n  text-align: center;\n`;\n\nexport const Input = styled(BaseInput)`\n  ${font({ size: '11px', color: text })};\n\n  background-color: transparent;\n  width: ${({ width }) => width};\n  margin-right: 3px;\n  > input {\n    background-color: transparent;\n    text-align: center;\n    padding: 5px;\n    height: 40px;\n    border: 0px;\n  }\n`;\n","import React, { useState, useCallback } from 'react';\n\nimport {\n  updateList,\n  createList,\n  updateCard,\n  createCard,\n} from 'services/trello';\n\nimport { Container, Input } from './BoardCell.styles';\n\nconst BoardCell = ({ cell, isMainBoard, setBoards }) => {\n  const [text, setText] = useState(cell.name);\n\n  const onChange = useCallback(async () => {\n    const { id, trelloType, name, idList, idBoard } = cell;\n\n    let responseOfNewCell;\n    if (trelloType === 'list') {\n      if (name) {\n        updateList({ ...cell, name: text });\n      } else {\n        responseOfNewCell = await createList(text, idBoard);\n      }\n    } else if (trelloType === 'card') {\n      if (name) {\n        updateCard({ ...cell, name: text });\n      } else {\n        responseOfNewCell = await createCard(text, idList);\n      }\n    }\n\n    setBoards((prevState) => {\n      return prevState.map((els) =>\n        els.map((el) =>\n          el.id === id\n            ? {\n                ...el,\n                ...(responseOfNewCell && { id: responseOfNewCell?.id }),\n                name: text,\n              }\n            : el\n        )\n      );\n    });\n  }, [setBoards, cell, text]);\n\n  return (\n    <Container isCenter={cell.isCenter} isMainBoard={isMainBoard}>\n      <Input\n        width=\"100%\"\n        type=\"text\"\n        name={cell.id}\n        maxLength={20}\n        value={text}\n        onEnter={onChange}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default BoardCell;\n","import styled from 'styled-components';\nimport {} from 'remember-ui';\n\nexport const GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 0.7rem;\n`;\n","import React from 'react';\n\nimport BoardCell from './BoardCell/BoardCell';\n\nimport { GridContainer } from './Board.styles';\n\nconst Board = ({ board, isMainBoard, setBoards, boardIndex }) => {\n  // console.log(board);\n  return (\n    <GridContainer>\n      {board.map((cell, index) => (\n        <BoardCell\n          key={cell.id}\n          cell={cell}\n          isMainBoard={isMainBoard}\n          setBoards={setBoards}\n          boardIndex={boardIndex}\n          cellIndex={index}\n        />\n      ))}\n    </GridContainer>\n  );\n};\n\nexport default Board;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX};\n\n  padding: 20px;\n`;\n\nexport const BoardWrapper = styled.div`\n  display: grid;\n  grid-template-rows: 1fr 1fr 1fr;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 2rem;\n  padding: 2rem;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 5px;\n  border-radius: 0.5rem;\n`;\n","import React, { useEffect, useContext } from 'react';\nimport { useRouteMatch, useHistory } from 'react-router-dom';\nimport { Spinner } from 'remember-ui';\n\nimport { TrelloContext, TrelloConsumer } from 'context/TrelloContext';\nimport Board from 'components/Board/Board';\nimport { getUUID } from 'utils/utils';\n\nimport { Container, BoardWrapper } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const {\n    params: { boardId },\n  } = useRouteMatch();\n  const history = useHistory();\n\n  const {\n    state: {\n      trelloObjects: { isLoaded, isAuthorized },\n    },\n    actions: { setTrelloBoardId },\n  } = useContext(TrelloContext);\n\n  useEffect(() => {\n    (async () => {\n      setTrelloBoardId(boardId);\n    })();\n  }, [boardId, setTrelloBoardId]);\n\n  useEffect(() => {\n    if (!isAuthorized) history.replace('/home');\n  }, [isAuthorized, history]);\n\n  return (\n    <TrelloConsumer>\n      {({ state: { boards }, actions: { setBoards } }) => (\n        <Container>\n          {isAuthorized && !isLoaded && <Spinner />}\n          {isAuthorized && isLoaded && (\n            <BoardWrapper>\n              {boards.map((board, index) => (\n                <Board\n                  key={getUUID()}\n                  board={board}\n                  isMainBoard={index === 4}\n                  setBoards={setBoards}\n                  boardIndex={index}\n                />\n              ))}\n            </BoardWrapper>\n          )}\n        </Container>\n      )}\n    </TrelloConsumer>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  min-height: 100vh;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport { TrelloProvider } from 'context/TrelloContext';\nimport { TrelloMyInfoProvider } from 'context/TrelloMyInfoContext';\nimport Routes from 'routers/routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport Home from 'pages/Home/Home';\nimport Dashboard from 'pages/Dashboard/Dashboard';\n\nimport { AppBody } from './App.styles';\n\nconst BASE_URL = '/mandal-art';\n\nfunction App() {\n  const { root, board } = Routes;\n\n  return (\n    <TrelloMyInfoProvider>\n      <TrelloProvider>\n        <BrowserRouter basename={BASE_URL}>\n          <AppBody>\n            <GlobalTheme />\n            <Switch>\n              <CommonRoute path={board.path}>\n                <Dashboard />\n              </CommonRoute>\n              <CommonRoute path={root.path}>\n                <Home />\n              </CommonRoute>\n              <Redirect to={root.path} />\n            </Switch>\n          </AppBody>\n        </BrowserRouter>\n      </TrelloProvider>\n    </TrelloMyInfoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // console.log(\n              //   'New content is available and will be used when all ' +\n              //     'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              // );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // console.log('Content is cached for offline use.');\n\n              // Execute callback\n              // eslint-disable-next-line no-lonely-if\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}